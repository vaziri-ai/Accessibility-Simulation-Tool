# -*- coding: utf-8 -*-
"""Raedelijn_LLM_Chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CyK3ECwqC6_jjhc-410NZ5oN7EUYGBRq
"""
import streamlit as st
from openai import OpenAI
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
model="gpt-4.1",

personas = [
    "low literacy",
    "cognitive load challenges",
    "visual impairment",
    "motor impairment",
    "older adults with declining digital skills",
    "non-native language speakers"
]

wcag_rules = [
    {"id": "1.1.1", "title": "Non-text Content", "description": "Provide text alternatives for any non-text content.", "personas": "visual impairment, cognitive load challenges"},
    {"id": "1.2.1", "title": "Audio-only and Video-only", "description": "Provide alternatives for audio-only and video-only content.", "personas": "visual impairment, older adults with declining digital skills"},
    {"id": "1.2.2", "title": "Captions (Prerecorded)", "description": "Provide captions for prerecorded audio.", "personas": "non-native language speakers, hearing impairment"},
    {"id": "1.3.1", "title": "Info and Relationships", "description": "Ensure information and relationships can be determined programmatically.", "personas": "low literacy, cognitive load challenges"},
    {"id": "1.3.2", "title": "Meaningful Sequence", "description": "Content must be in a meaningful order.", "personas": "cognitive load challenges, older adults with declining digital skills"},
    {"id": "1.4.1", "title": "Use of Color", "description": "Don't use color as the only means of conveying information.", "personas": "visual impairment, color blindness"},
    {"id": "1.4.3", "title": "Contrast (Minimum)", "description": "Ensure text has sufficient contrast.", "personas": "visual impairment, older adults with declining digital skills"},
    {"id": "1.4.4", "title": "Resize Text", "description": "Text should be resizable up to 200% without loss of content or function.", "personas": "visual impairment"},
    {"id": "2.1.1", "title": "Keyboard", "description": "All functionality must be accessible by keyboard.", "personas": "motor impairment"},
    {"id": "2.1.2", "title": "No Keyboard Trap", "description": "Users must be able to navigate using keyboard only.", "personas": "motor impairment"},
    {"id": "2.3.1", "title": "Three Flashes or Below Threshold", "description": "Avoid content that flashes more than three times per second.", "personas": "cognitive load challenges, older adults with declining digital skills"},
    {"id": "2.4.1", "title": "Bypass Blocks", "description": "Provide a way to skip repeated blocks of content.", "personas": "screen reader users, motor impairment"},
    {"id": "2.4.3", "title": "Focus Order", "description": "Focus order must preserve meaning and operability.", "personas": "motor impairment, older adults with declining digital skills"},
    {"id": "2.4.4", "title": "Link Purpose (In Context)", "description": "Links must have clear purpose.", "personas": "low literacy, non-native language speakers"},
    {"id": "2.4.6", "title": "Headings and Labels", "description": "Headings and labels must describe topic or purpose.", "personas": "low literacy, cognitive load challenges"},
    {"id": "2.5.1", "title": "Pointer Gestures", "description": "Ensure all functionality is operable without complex gestures.", "personas": "motor impairment"},
    {"id": "2.5.2", "title": "Pointer Cancellation", "description": "Functionality triggered by pointer input can be cancelled.", "personas": "motor impairment"},
    {"id": "2.5.3", "title": "Label in Name", "description": "Visible label must match accessible name.", "personas": "screen reader users, low literacy"},
    {"id": "3.1.1", "title": "Language of Page", "description": "Declare default language of the page.", "personas": "non-native language speakers"},
    {"id": "3.1.2", "title": "Language of Parts", "description": "Declare language changes within content.", "personas": "non-native language speakers"},
    {"id": "3.2.1", "title": "On Focus", "description": "Elements must not trigger changes unexpectedly.", "personas": "older adults with declining digital skills, motor impairment"},
    {"id": "3.2.3", "title": "Consistent Navigation", "description": "Navigation must be consistent across pages.", "personas": "low literacy, older adults with declining digital skills"},
    {"id": "3.2.4", "title": "Consistent Identification", "description": "Components with same function are identified consistently.", "personas": "low literacy, cognitive load challenges"},
    {"id": "3.3.1", "title": "Error Identification", "description": "Clearly identify input errors.", "personas": "low literacy, cognitive load challenges"},
    {"id": "3.3.2", "title": "Labels or Instructions", "description": "Provide labels/instructions for user input.", "personas": "cognitive load challenges, non-native language speakers"},
    {"id": "3.3.3", "title": "Error Suggestion", "description": "Suggest corrections when users make errors.", "personas": "older adults with declining digital skills, cognitive load challenges"},
    {"id": "3.3.4", "title": "Error Prevention", "description": "Prevent critical errors with confirmation or review.", "personas": "cognitive load challenges"},
    {"id": "4.1.1", "title": "Parsing", "description": "Ensure HTML is well-formed and parsable.", "personas": "screen reader users"},
    {"id": "4.1.2", "title": "Name, Role, Value", "description": "UI components must expose name, role, and value.", "personas": "assistive technology users"},
    {"id": "4.1.3", "title": "Status Messages", "description": "Provide accessible status messages.", "personas": "screen reader users, motor impairment"}
]

def generate_why_this_matters(rule_title, rule_description, persona):
    prompt = f"""
Accessibility Rule: {rule_title}
Description: {rule_description}

This issue affects {persona}. Please explain why this accessibility issue matters for them in plain language.
Use a helpful, gentle tone. Keep the explanation short, and use a maximum of 3 sentences.
Avoid jargon, and speak as if guiding a non-technical healthcare staff member using an accessibility simulation tool for the first time.
"""

    response = client.chat.completions.create(
        model="gpt-4.1",
        messages=[
            {"role": "system", "content": "You are an accessibility assistant helping explain accessibility barriers to non-technical healthcare professionals."},
            {"role": "user", "content": prompt}
        ]
    )

    return response.choices[0].message.content


import streamlit as st

st.title("üß† Why This Matters (Accessibility Explainer)")

# Extract titles from the wcag_rules list
rule_titles = [rule["title"] for rule in wcag_rules]

selected_rule_title = st.selectbox("Select WCAG Rule", rule_titles)
selected_persona = st.selectbox("üßç Select Persona", personas)

# Generate when button is clicked
if st.button("Why this Matters?"):
    # Find the selected rule dictionary based on the title
    selected_rule = next((rule for rule in wcag_rules if rule["title"] == selected_rule_title), None)

    if selected_rule:
        rule_description = selected_rule["description"]
        persona = selected_persona
        # Assuming generate_why_this_matters is defined in a previous cell
        explanation = generate_why_this_matters(selected_rule_title, rule_description, persona)
        st.write("### Why this Matters:")
        st.write(explanation)
    else:
        st.write("Could not find the selected rule details.")

# --- Chat with AI Assistant ---
st.markdown("---")
st.subheader("üí¨ Ask More Questions")

# Keep track of chat history
if "chat_history" not in st.session_state:
    st.session_state.chat_history = [
        {"role": "system", "content": "You are an accessibility assistant helping explain accessibility barriers to non-technical healthcare professionals."}
    ]

# User input box
user_input = st.text_input("Ask a follow-up question:", key="user_input")

# Send question
if st.button("Send"):
    if user_input:
        # Add user message to history
        st.session_state.chat_history.append({"role": "user", "content": user_input})

        # Get LLM response
        response = client.chat.completions.create(
            model="gpt-4",  # or gpt-3.5-turbo
            messages=st.session_state.chat_history
        )
        reply = response.choices[0].message.content

        # Add assistant reply to history
        st.session_state.chat_history.append({"role": "assistant", "content": reply})

        # Display chat
        st.markdown("### üë©‚Äç‚öïÔ∏è AI Assistant Response")
        st.write(reply)
    else:
        st.warning("Please type a question before clicking Send.")

